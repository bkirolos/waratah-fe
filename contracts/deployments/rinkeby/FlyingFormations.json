{
  "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleStartsAt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_sneakerBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_standardBaseURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct FlyingFormations.PremintEntry[]",
          "name": "premintEntries",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "_footballTeamWallet",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_ducksWallet",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_divisionStWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "SneakerRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "footballTeamReceives",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ducksReceives",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "divisionStReceives",
          "type": "uint256"
        }
      ],
      "name": "TokenBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sneakerRedeemedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "__baseURI",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "updateDivisionStWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "updateDucksWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "updateFootballTeamWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "updatePaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_redeemEnabled",
          "type": "bool"
        }
      ],
      "name": "updateRedeemEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_redeemExpired",
          "type": "bool"
        }
      ],
      "name": "updateRedeemExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleStartsAt",
          "type": "uint256"
        }
      ],
      "name": "updateSaleStartsAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "__baseURI",
          "type": "string"
        }
      ],
      "name": "updateSneakerBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
  "receipt": {
    "to": null,
    "from": "0x4b8c87E697AD25994FD5c6BADD5A3e0e498ce9d1",
    "contractAddress": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
    "transactionIndex": 9,
    "gasUsed": "6740173",
    "logsBloom": "0x00000000000001000000004800000400000000000002000002800000000000200000000000000000020080000420008000001000000000000000001002000000000000000000048110000008000000000019000000000000010000100000002000000000020000000000000040000800000000000000000000000010000000400000000000000000000100000100080000000000041002000000000000000000000000000800000040008002000020100800000100000000040000000004004000040002002000004010000000000000002000020000000000400000000c24020004000000400000080000020000000000000404000000040000000000082008",
    "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4",
    "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b8c87e697ad25994fd5c6badd5a3e0e498ce9d1"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e4bbcbff51e61d0d95fcc5016609ac8354b177c4",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ac662f58d3507a6f4a37f8532df201d9010fe7",
          "0x0000000000000000000000000000000000000000000000000000000000000055"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ac662f58d3507a6f4a37f8532df201d9010fe7",
          "0x0000000000000000000000000000000000000000000000000000000000000059"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000689717c0b1ab0f188235cfa487ced32feebf9698",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd40ad5c8f59d140869504a55295ae650078fc41",
          "0x0000000000000000000000000000000000000000000000000000000000000075"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002b5ac9107e0ffadcb5fa9bc9aaf42c9094693d47",
          "0x0000000000000000000000000000000000000000000000000000000000000076"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd21d7cb36f0bd063c99b9fc7565335fa24029d5",
          "0x0000000000000000000000000000000000000000000000000000000000000077"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8bad4743bbdd8817d0042f82e350c29b728ec72",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009094b9de66790e0a5ab0e3299d38afb037be458b",
          "0x0000000000000000000000000000000000000000000000000000000000000054"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10198290,
        "transactionHash": "0x0e5db25b7334130106aed74ec5ecee96f87625818744c3bde3fff74bdd6fa1d6",
        "address": "0x864245f6F5C6190A1e5ea0F1167913172cD7b23E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054c1316c11ee8086bdcf051680025f61c276e58a",
          "0x000000000000000000000000000000000000000000000000000000000000006f"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x7d9e860467f253788687ffe0377ac843e81f6029675718a870b9fde41109b2e4"
      }
    ],
    "blockNumber": 10198290,
    "cumulativeGasUsed": "10362304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1645320057,
    "ipfs://QmR4DvpTpMu83hfE213fMiEP5jLqYBbfTZCvmpHBUi8AL6/",
    "ipfs://QmaN8W7fo2ju5B2aqtHYCQYkMYJeAAFWfYLowS8xshXU7F/",
    [
      {
        "addr": "0xe4bBCbFf51e61D0D95FcC5016609aC8354B177C4",
        "tokenId": 30
      },
      {
        "addr": "0xa0ac662f58d3507a6f4a37f8532df201d9010fe7",
        "tokenId": 85
      },
      {
        "addr": "0xa0ac662f58d3507a6f4a37f8532df201d9010fe7",
        "tokenId": 89
      },
      {
        "addr": "0x689717c0B1Ab0f188235CfA487CeD32fEEbF9698",
        "tokenId": 23
      },
      {
        "addr": "0xbD40Ad5c8F59D140869504a55295Ae650078fc41",
        "tokenId": 117
      },
      {
        "addr": "0x2b5aC9107e0FfADCB5fa9bc9AAf42C9094693d47",
        "tokenId": 118
      },
      {
        "addr": "0xcd21d7CB36f0BD063C99B9Fc7565335Fa24029D5",
        "tokenId": 119
      },
      {
        "addr": "0xA8BAd4743Bbdd8817D0042f82e350C29B728ec72",
        "tokenId": 11
      },
      {
        "addr": "0x9094b9De66790E0a5aB0e3299D38AFB037be458B",
        "tokenId": 84
      },
      {
        "addr": "0x54C1316c11Ee8086BDCF051680025f61c276e58a",
        "tokenId": 111
      }
    ],
    "0x1a003aE61B44A3eD1fAfBf8549856a4Da9c7312E",
    "0x7afa12A8708C7069Cde17d4D3c90f01AA6653797",
    "0x15b7f743e2bcBA33320e26d145D7628149D73337"
  ],
  "numDeployments": 3,
  "solcInputHash": "d847133dc166b170f03bbd9dcefcd897",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStartsAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sneakerBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_standardBaseURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct FlyingFormations.PremintEntry[]\",\"name\":\"premintEntries\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"_footballTeamWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_ducksWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_divisionStWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SneakerRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"footballTeamReceives\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ducksReceives\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divisionStReceives\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sneakerRedeemedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateDivisionStWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateDucksWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateFootballTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_redeemEnabled\",\"type\":\"bool\"}],\"name\":\"updateRedeemEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_redeemExpired\",\"type\":\"bool\"}],\"name\":\"updateRedeemExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStartsAt\",\"type\":\"uint256\"}],\"name\":\"updateSaleStartsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"}],\"name\":\"updateSneakerBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@contracts/FlyingFormations.sol\":\"FlyingFormations\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@contracts/FlyingFormations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n//    ___   __          _                   \\n//   / _/  / /  __ __  (_)  ___   ___ _    \\n//  / _/  / /  / // / / /  / _ \\\\ / _ `/    \\n// /_/   /_/   \\\\_, / /_/  /_//_/ \\\\_, /     \\n//            /___/             /___/                                                               \\n//    ___                          __    _                 \\n//   / _/ ___   ____  __ _  ___ _ / /_  (_) ___   ___   ___\\n//  / _/ / _ \\\\ / __/ /  ' \\\\/ _ `// __/ / / / _ \\\\ / _ \\\\ (_-<\\n// /_/   \\\\___//_/   /_/_/_/\\\\_,_/ \\\\__/ /_/  \\\\___//_//_//___/\\n//\\n//\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract FlyingFormations is ERC721Enumerable, Ownable, Pausable {\\n    using SafeMath for uint;\\n    using Strings for uint256;\\n\\n    event TokenBought(\\n      uint tokenId,\\n      address recipient,\\n      uint paid,\\n      uint footballTeamReceives,\\n      uint ducksReceives,\\n      uint divisionStReceives\\n    );\\n\\n    event SneakerRedeemed(\\n      uint tokenId,\\n      address recipient\\n    );\\n\\n    // uint eth = 1e18 // WETH\\n    // uint hrs = 1 hours; // HOURS (in seconds)\\n\\n    // SMALLER AMOUNT & SHORTER DURATION FOR TESTING\\n    uint constant eth = 1e16; // WETH\\n    uint constant hrs = 5 minutes; // HOURS (in seconds)\\n\\n    uint constant price1 = 125*eth/10; // 12.5 ETH\\n    uint constant stage1 = 3*hrs; // 3 hours\\n\\n    uint constant price2 = 5*eth; // 5 ETH\\n    uint constant stage2 = 9*hrs; // 9 hours\\n\\n    uint constant floorPrice = 1*eth; // 1 ETH\\n\\n    uint constant priceDeductionRate1 = (price1 - price2)/stage1; // drop to 5.0 ETH at 3 hours\\n    uint constant priceDeductionRate2 = (price2 - floorPrice)/stage2; // drop to 1.0 ETH at 12 hours\\n\\n    mapping (address => bool) hasPurchased;\\n\\n    uint saleStartsAt;\\n    bool redeemEnabled;\\n    bool redeemExpired;\\n\\n    string sneakerBaseURI;\\n    string standardBaseURI;\\n\\n    struct PremintEntry {\\n      address addr;\\n      uint tokenId;\\n    }\\n\\n    mapping (uint => address) public sneakerRedeemedBy;\\n\\n    address payable footballTeamWallet;\\n    address payable ducksWallet;\\n    address payable divisionStWallet;\\n\\n    uint constant TEAM_SPLIT = 6750;\\n    uint constant DUCKS_SPLIT = 1000;\\n\\n    uint constant MAX_TOKENS = 120;\\n\\n    constructor(\\n      uint _saleStartsAt,\\n      string memory _sneakerBaseURI,\\n      string memory _standardBaseURI,\\n      PremintEntry[] memory premintEntries,\\n      address payable _footballTeamWallet,\\n      address payable _ducksWallet,\\n      address payable _divisionStWallet\\n    ) ERC721(\\\"Flying Formations\\\", \\\"FFT\\\") {\\n      saleStartsAt = _saleStartsAt;\\n\\n      // Set baseURIs for pre-redeem, and\\n      // post-redeem NFTs\\n      sneakerBaseURI = _sneakerBaseURI;\\n      standardBaseURI = _standardBaseURI;\\n\\n      // Premint tokens for whitelist token recipients\\n      for(uint i; i < premintEntries.length; i++){\\n        _mint(premintEntries[i].addr, premintEntries[i].tokenId);\\n        hasPurchased[premintEntries[i].addr] = true;\\n        sneakerRedeemedBy[premintEntries[i].tokenId] = premintEntries[i].addr;\\n      }\\n\\n      // Set team wallets\\n      footballTeamWallet = _footballTeamWallet;\\n      ducksWallet = _ducksWallet;\\n      divisionStWallet = _divisionStWallet;\\n    }\\n\\n    function buy(address recipient, uint tokenId) public payable {\\n      require(!hasPurchased[msg.sender], \\\"FlyingFormations: User has already bought one NFT\\\");\\n      require(msg.sender == tx.origin, \\\"FlyingFormations: Account is not an EOA\\\");\\n      require(block.timestamp >= saleStartsAt, \\\"FlyingFormations: auction has not started\\\");\\n      require(tokenId <= MAX_TOKENS && tokenId > 0, \\\"FlyingFormations: invalid tokenId\\\");\\n\\n      uint price = getPrice();\\n      require(msg.value >= price, \\\"FlyingFormations: insufficient funds sent, please check current price\\\");\\n\\n      // Mint token and register purchaser so\\n      // user cannot buy more than one\\n      _mint(recipient, tokenId);\\n      hasPurchased[msg.sender] = true;\\n\\n\\n      // Distribute funds to teams\\n      uint footballTeamReceives = msg.value.mul(TEAM_SPLIT).div(10000);\\n      uint ducksReceives = msg.value.mul(DUCKS_SPLIT).div(10000);\\n      uint divisionStReceives = msg.value\\n        .sub(footballTeamReceives)\\n        .sub(ducksReceives);\\n\\n      (bool success, ) = footballTeamWallet.call{value: footballTeamReceives}(\\\"\\\");\\n      require(success, \\\"FlyingFormations: footballTeamWallet failed to receive\\\");\\n      (success, ) = ducksWallet.call{value: ducksReceives}(\\\"\\\");\\n      require(success, \\\"FlyingFormations: ducksWallet failed to receive\\\");\\n      (success, ) = divisionStWallet.call{value: divisionStReceives}(\\\"\\\");\\n      require(success, \\\"FlyingFormations: divisionStWallet failed to receive\\\");\\n\\n      emit TokenBought(tokenId, recipient, price, footballTeamReceives, ducksReceives, divisionStReceives);\\n    }\\n\\n    // Redeem functionality for claiming Nike Air Max 1 OU Edition\\n    //                                   _    _\\n    //                                  (_\\\\__/(,_\\n    //                                  | \\\\ `_////-._\\n    //                      _    _      L_/__ \\\"=> __/`\\\\\\n    //                     (_\\\\__/(,_    |=====;__/___./\\n    //                     | \\\\ `_////-._'-'-'-\\\"\\\"\\\"\\\"\\\"\\\"`\\n    //                     J_/___\\\"=> __/`\\\\\\n    //                     |=====;__/___./\\n    //                     '-'-'-\\\"\\\"\\\"\\\"\\\"\\\"\\\"`\\n    function redeem(uint tokenId) public {\\n      require(redeemEnabled, \\\"FlyingFormations: redeem is currently not enabled\\\");\\n      require(!redeemExpired, \\\"FlyingFormations: redeem window has expired\\\");\\n      require(\\n        sneakerRedeemedBy[tokenId] == address(0x0),\\n        \\\"FlyingFormations: token has already beened redeemed\\\"\\n      );\\n      require(\\n        msg.sender == ownerOf(tokenId),\\n        \\\"FlyingFormations: caller is not owner\\\"\\n      );\\n\\n      sneakerRedeemedBy[tokenId] = ownerOf(tokenId);\\n      emit SneakerRedeemed(tokenId, msg.sender);\\n    }\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    function getPrice() public view returns (uint) {\\n      require(block.timestamp >= saleStartsAt, \\\"FlyingFormations: auction has not started\\\");\\n\\n      uint elapsedTime = block.timestamp - saleStartsAt;\\n\\n      if (elapsedTime < stage1) {\\n        return price1.sub(elapsedTime.mul(priceDeductionRate1));\\n      } else if (elapsedTime < stage2) {\\n        return price2.sub(elapsedTime.mul(priceDeductionRate2));\\n      } else {\\n        return floorPrice;\\n      }\\n    }\\n\\n    function getAllTokens() public view returns (uint[] memory) {\\n      uint n = totalSupply();\\n      uint[] memory tokenIds = new uint[](n);\\n\\n      for(uint i = 0; i < n; i++){\\n        tokenIds[i] = tokenByIndex(i);\\n      }\\n      return tokenIds;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n      require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n      if (redeemExpired || sneakerRedeemedBy[tokenId] != address(0x0)){\\n        return string(abi.encodePacked(standardBaseURI, tokenId.toString(), \\\".json\\\"));\\n      } else {\\n        return string(abi.encodePacked(sneakerBaseURI, tokenId.toString(), \\\".json\\\"));\\n      }\\n    }\\n\\n    // ============ OWNER INTERFACE ============\\n \\n\\n    function updateFootballTeamWallet(address payable _wallet) public onlyOwner {\\n      footballTeamWallet = _wallet;\\n    }\\n\\n    function updateDucksWallet(address payable _wallet) public onlyOwner {\\n      ducksWallet = _wallet;\\n    }\\n\\n    function updateDivisionStWallet(address payable _wallet) public onlyOwner {\\n      divisionStWallet = _wallet;\\n    }\\n\\n    function updateBaseURI(string calldata __baseURI) public onlyOwner {\\n      standardBaseURI = __baseURI;\\n    }\\n\\n    function updateSneakerBaseURI(string calldata __baseURI) public onlyOwner {\\n      sneakerBaseURI = __baseURI;\\n    }\\n\\n    function updateSaleStartsAt(uint _saleStartsAt) public onlyOwner {\\n      saleStartsAt = _saleStartsAt;\\n    }\\n\\n    function updateRedeemEnabled(bool _redeemEnabled) public onlyOwner {\\n      redeemEnabled = _redeemEnabled;\\n    }\\n\\n    function updateRedeemExpired(bool _redeemExpired) public onlyOwner {\\n      redeemExpired = _redeemExpired;\\n    }\\n\\n    function updatePaused(bool _paused) public onlyOwner {\\n      if (_paused) {\\n        _pause();\\n      } else {\\n        _unpause();\\n      }\\n    }\\n}\\n\\n//////////////////////////////////////////////\\n////////contract/by/wurmhumus-fabrik.net//////\\n//////////////////////////////////////////////\",\"keccak256\":\"0x157347e005f4317b939e4316fc0c56addcd90caf0ab943dcd1f7dc68d36ca591\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c80637cb5f6781161010d578063b88d4fde116100a0578063db006a751161006f578063db006a751461071d578063e985e9c514610746578063f2fde38b14610783578063f74025cf146107ac578063f77f0b99146107e9576101f8565b8063b88d4fde14610672578063c87b56dd1461069b578063cce7ec13146106d8578063d287f619146106f4576101f8565b806398d5fdca116100dc57806398d5fdca146105cc578063a22cb465146105f7578063ab3b8a7114610620578063b6ff8b2514610649576101f8565b80637cb5f678146105245780638da5cb5b1461054d578063931688cb1461057857806395d89b41146105a1576101f8565b80632a5c792a116101905780635c975abb1161015f5780635c975abb1461043f5780635dd7b59d1461046a5780636352211e1461049357806370a08231146104d0578063715018a61461050d576101f8565b80632a5c792a146103715780632f745c591461039c57806342842e0e146103d95780634f6ccce714610402576101f8565b806308cdc2a8116101cc57806308cdc2a8146102cb578063095ea7b3146102f457806318160ddd1461031d57806323b872dd14610348576101f8565b8062f69f8f146101fd57806301ffc9a71461022657806306fdde0314610263578063081812fc1461028e575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190613a0f565b610812565b005b34801561023257600080fd5b5061024d60048036038101906102489190613a38565b6108ab565b60405161025a919061423f565b60405180910390f35b34801561026f57600080fd5b50610278610925565b604051610285919061425a565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190613acf565b6109b7565b6040516102c291906141b6565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190613a0f565b610a3c565b005b34801561030057600080fd5b5061031b600480360381019061031691906139d3565b610ad7565b005b34801561032957600080fd5b50610332610bef565b60405161033f919061467c565b60405180910390f35b34801561035457600080fd5b5061036f600480360381019061036a91906138cd565b610bfc565b005b34801561037d57600080fd5b50610386610c5c565b604051610393919061421d565b60405180910390f35b3480156103a857600080fd5b506103c360048036038101906103be91906139d3565b610d52565b6040516103d0919061467c565b60405180910390f35b3480156103e557600080fd5b5061040060048036038101906103fb91906138cd565b610df7565b005b34801561040e57600080fd5b5061042960048036038101906104249190613acf565b610e17565b604051610436919061467c565b60405180910390f35b34801561044b57600080fd5b50610454610eae565b604051610461919061423f565b60405180910390f35b34801561047657600080fd5b50610491600480360381019061048c9190613acf565b610ec5565b005b34801561049f57600080fd5b506104ba60048036038101906104b59190613acf565b610f4b565b6040516104c791906141b6565b60405180910390f35b3480156104dc57600080fd5b506104f760048036038101906104f2919061383f565b610ffd565b604051610504919061467c565b60405180910390f35b34801561051957600080fd5b506105226110b5565b005b34801561053057600080fd5b5061054b60048036038101906105469190613868565b61113d565b005b34801561055957600080fd5b506105626111fd565b60405161056f91906141b6565b60405180910390f35b34801561058457600080fd5b5061059f600480360381019061059a9190613a8a565b611227565b005b3480156105ad57600080fd5b506105b66112b9565b6040516105c3919061425a565b60405180910390f35b3480156105d857600080fd5b506105e161134b565b6040516105ee919061467c565b60405180910390f35b34801561060357600080fd5b5061061e60048036038101906106199190613997565b611517565b005b34801561062c57600080fd5b5061064760048036038101906106429190613a0f565b61152d565b005b34801561065557600080fd5b50610670600480360381019061066b9190613868565b6115c6565b005b34801561067e57600080fd5b506106996004803603810190610694919061391c565b611686565b005b3480156106a757600080fd5b506106c260048036038101906106bd9190613acf565b6116e8565b6040516106cf919061425a565b60405180910390f35b6106f260048036038101906106ed91906139d3565b611817565b005b34801561070057600080fd5b5061071b60048036038101906107169190613a8a565b611d8f565b005b34801561072957600080fd5b50610744600480360381019061073f9190613acf565b611e21565b005b34801561075257600080fd5b5061076d60048036038101906107689190613891565b61206e565b60405161077a919061423f565b60405180910390f35b34801561078f57600080fd5b506107aa60048036038101906107a5919061383f565b612102565b005b3480156107b857600080fd5b506107d360048036038101906107ce9190613acf565b6121fa565b6040516107e091906141b6565b60405180910390f35b3480156107f557600080fd5b50610810600480360381019061080b9190613868565b61222d565b005b61081a6122f2565b73ffffffffffffffffffffffffffffffffffffffff166108386111fd565b73ffffffffffffffffffffffffffffffffffffffff161461088e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610885906144dc565b60405180910390fd5b80600d60016101000a81548160ff02191690831515021790555050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061091e575061091d826122fa565b5b9050919050565b606060008054610934906149f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610960906149f0565b80156109ad5780601f10610982576101008083540402835291602001916109ad565b820191906000526020600020905b81548152906001019060200180831161099057829003601f168201915b5050505050905090565b60006109c2826123dc565b610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f89061449c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610a446122f2565b73ffffffffffffffffffffffffffffffffffffffff16610a626111fd565b73ffffffffffffffffffffffffffffffffffffffff1614610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf906144dc565b60405180910390fd5b8015610acb57610ac6612448565b610ad4565b610ad36124eb565b5b50565b6000610ae282610f4b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a9061457c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b726122f2565b73ffffffffffffffffffffffffffffffffffffffff161480610ba15750610ba081610b9b6122f2565b61206e565b5b610be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd7906143fc565b60405180910390fd5b610bea838361258d565b505050565b6000600880549050905090565b610c0d610c076122f2565b82612646565b610c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c43906145bc565b60405180910390fd5b610c57838383612724565b505050565b60606000610c68610bef565b905060008167ffffffffffffffff811115610cac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610cda5781602001602082028036833780820191505090505b50905060005b82811015610d4957610cf181610e17565b828281518110610d2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610d4190614a53565b915050610ce0565b50809250505090565b6000610d5d83610ffd565b8210610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d95906142bc565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610e1283838360405180602001604052806000815250611686565b505050565b6000610e21610bef565b8210610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e59906145fc565b60405180910390fd5b60088281548110610e9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000600a60149054906101000a900460ff16905090565b610ecd6122f2565b73ffffffffffffffffffffffffffffffffffffffff16610eeb6111fd565b73ffffffffffffffffffffffffffffffffffffffff1614610f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f38906144dc565b60405180910390fd5b80600c8190555050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ff4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610feb9061443c565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561106e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110659061441c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110bd6122f2565b73ffffffffffffffffffffffffffffffffffffffff166110db6111fd565b73ffffffffffffffffffffffffffffffffffffffff1614611131576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611128906144dc565b60405180910390fd5b61113b6000612980565b565b6111456122f2565b73ffffffffffffffffffffffffffffffffffffffff166111636111fd565b73ffffffffffffffffffffffffffffffffffffffff16146111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b0906144dc565b60405180910390fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61122f6122f2565b73ffffffffffffffffffffffffffffffffffffffff1661124d6111fd565b73ffffffffffffffffffffffffffffffffffffffff16146112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129a906144dc565b60405180910390fd5b8181600f91906112b492919061366c565b505050565b6060600180546112c8906149f0565b80601f01602080910402602001604051908101604052809291908181526020018280546112f4906149f0565b80156113415780601f1061131657610100808354040283529160200191611341565b820191906000526020600020905b81548152906001019060200180831161132457829003601f168201915b5050505050905090565b6000600c54421015611392576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113899061455c565b60405180910390fd5b6000600c54426113a291906148f4565b905061012c60036113b3919061489a565b81101561145c5761145461142661012c60036113cf919061489a565b662386f26fc1000060056113e3919061489a565b600a662386f26fc10000607d6113f9919061489a565b6114039190614869565b61140d91906148f4565b6114179190614869565b83612a4690919063ffffffff16565b600a662386f26fc10000607d61143c919061489a565b6114469190614869565b612a5c90919063ffffffff16565b915050611514565b61012c600961146b919061489a565b8110156114fc576114f46114d261012c6009611487919061489a565b662386f26fc10000600161149b919061489a565b662386f26fc1000060056114af919061489a565b6114b991906148f4565b6114c39190614869565b83612a4690919063ffffffff16565b662386f26fc1000060056114e6919061489a565b612a5c90919063ffffffff16565b915050611514565b662386f26fc100006001611510919061489a565b9150505b90565b6115296115226122f2565b8383612a72565b5050565b6115356122f2565b73ffffffffffffffffffffffffffffffffffffffff166115536111fd565b73ffffffffffffffffffffffffffffffffffffffff16146115a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a0906144dc565b60405180910390fd5b80600d60006101000a81548160ff02191690831515021790555050565b6115ce6122f2565b73ffffffffffffffffffffffffffffffffffffffff166115ec6111fd565b73ffffffffffffffffffffffffffffffffffffffff1614611642576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611639906144dc565b60405180910390fd5b80601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6116976116916122f2565b83612646565b6116d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cd906145bc565b60405180910390fd5b6116e284848484612bdf565b50505050565b60606116f3826123dc565b611732576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117299061453c565b60405180910390fd5b600d60019054906101000a900460ff16806117ad5750600073ffffffffffffffffffffffffffffffffffffffff166010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156117e457600f6117bd83612c3b565b6040516020016117ce929190614172565b6040516020818303038152906040529050611812565b600e6117ef83612c3b565b604051602001611800929190614172565b60405160208183030381529060405290505b919050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b9061427c565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611909906144bc565b60405180910390fd5b600c54421015611957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194e9061455c565b60405180910390fd5b607881111580156119685750600081115b6119a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199e9061465c565b60405180910390fd5b60006119b161134b565b9050803410156119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed906143dc565b60405180910390fd5b611a008383612de8565b6001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000611a83612710611a75611a5e34612a4690919063ffffffff16565b612fb690919063ffffffff16565b90506000611ab0612710611aa26103e834612a4690919063ffffffff16565b612fb690919063ffffffff16565b90506000611ad982611acb8534612a5c90919063ffffffff16565b612a5c90919063ffffffff16565b90506000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051611b23906141a1565b60006040518083038185875af1925050503d8060008114611b60576040519150601f19603f3d011682016040523d82523d6000602084013e611b65565b606091505b5050905080611ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba0906144fc565b60405180910390fd5b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051611bef906141a1565b60006040518083038185875af1925050503d8060008114611c2c576040519150601f19603f3d011682016040523d82523d6000602084013e611c31565b606091505b50508091505080611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e9061459c565b60405180910390fd5b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051611cbd906141a1565b60006040518083038185875af1925050503d8060008114611cfa576040519150601f19603f3d011682016040523d82523d6000602084013e611cff565b606091505b50508091505080611d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3c906145dc565b60405180910390fd5b7f4689c69f82cdf5b000bb00a84dd3258356c9997272fd94a9153e9d13a5b7c29a868887878787604051611d7e969594939291906146c0565b60405180910390a150505050505050565b611d976122f2565b73ffffffffffffffffffffffffffffffffffffffff16611db56111fd565b73ffffffffffffffffffffffffffffffffffffffff1614611e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e02906144dc565b60405180910390fd5b8181600e9190611e1c92919061366c565b505050565b600d60009054906101000a900460ff16611e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e679061445c565b60405180910390fd5b600d60019054906101000a900460ff1615611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb79061439c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166010600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f599061461c565b60405180910390fd5b611f6b81610f4b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcf9061463c565b60405180910390fd5b611fe181610f4b565b6010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb7d04369b0951a44d17f7ed06b0f42dac0f3c7904020fe8c88970ad31bc63dab8133604051612063929190614697565b60405180910390a150565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61210a6122f2565b73ffffffffffffffffffffffffffffffffffffffff166121286111fd565b73ffffffffffffffffffffffffffffffffffffffff161461217e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612175906144dc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e5906142fc565b60405180910390fd5b6121f781612980565b50565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6122356122f2565b73ffffffffffffffffffffffffffffffffffffffff166122536111fd565b73ffffffffffffffffffffffffffffffffffffffff16146122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a0906144dc565b60405180910390fd5b80601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b505050565b600033905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806123c557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806123d557506123d482612fcc565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612450610eae565b15612490576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612487906143bc565b60405180910390fd5b6001600a60146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124d46122f2565b6040516124e191906141b6565b60405180910390a1565b6124f3610eae565b612532576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125299061429c565b60405180910390fd5b6000600a60146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125766122f2565b60405161258391906141b6565b60405180910390a1565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661260083610f4b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612651826123dc565b612690576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126879061437c565b60405180910390fd5b600061269b83610f4b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061270a57508373ffffffffffffffffffffffffffffffffffffffff166126f2846109b7565b73ffffffffffffffffffffffffffffffffffffffff16145b8061271b575061271a818561206e565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661274482610f4b565b73ffffffffffffffffffffffffffffffffffffffff161461279a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127919061451c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561280a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128019061433c565b60405180910390fd5b612815838383613036565b61282060008261258d565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461287091906148f4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128c79190614813565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008183612a54919061489a565b905092915050565b60008183612a6a91906148f4565b905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ae1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad89061435c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612bd2919061423f565b60405180910390a3505050565b612bea848484612724565b612bf68484848461314a565b612c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2c906142dc565b60405180910390fd5b50505050565b60606000821415612c83576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612de3565b600082905060005b60008214612cb5578080612c9e90614a53565b915050600a82612cae9190614869565b9150612c8b565b60008167ffffffffffffffff811115612cf7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612d295781602001600182028036833780820191505090505b5090505b60008514612ddc57600182612d4291906148f4565b9150600a85612d519190614a9c565b6030612d5d9190614813565b60f81b818381518110612d99577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612dd59190614869565b9450612d2d565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4f9061447c565b60405180910390fd5b612e61816123dc565b15612ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e989061431c565b60405180910390fd5b612ead60008383613036565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612efd9190614813565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008183612fc49190614869565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6130418383836122ed565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130845761307f816132e1565b6130c3565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146130c2576130c1838261332a565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156131065761310181613497565b613145565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146131445761314382826135da565b5b5b505050565b600061316b8473ffffffffffffffffffffffffffffffffffffffff16613659565b156132d4578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026131946122f2565b8786866040518563ffffffff1660e01b81526004016131b694939291906141d1565b602060405180830381600087803b1580156131d057600080fd5b505af192505050801561320157506040513d601f19601f820116820180604052508101906131fe9190613a61565b60015b613284573d8060008114613231576040519150601f19603f3d011682016040523d82523d6000602084013e613236565b606091505b5060008151141561327c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613273906142dc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506132d9565b600190505b949350505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161333784610ffd565b61334191906148f4565b9050600060076000848152602001908152602001600020549050818114613426576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506134ab91906148f4565b9050600060096000848152602001908152602001600020549050600060088381548110613501577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110613549577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806135be577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006135e583610ffd565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b828054613678906149f0565b90600052602060002090601f01602090048101928261369a57600085556136e1565b82601f106136b357803560ff19168380011785556136e1565b828001600101855582156136e1579182015b828111156136e05782358255916020019190600101906136c5565b5b5090506136ee91906136f2565b5090565b5b8082111561370b5760008160009055506001016136f3565b5090565b600061372261371d84614746565b614721565b90508281526020810184848401111561373a57600080fd5b6137458482856149ae565b509392505050565b60008135905061375c816154e8565b92915050565b600081359050613771816154ff565b92915050565b60008135905061378681615516565b92915050565b60008135905061379b8161552d565b92915050565b6000815190506137b08161552d565b92915050565b600082601f8301126137c757600080fd5b81356137d784826020860161370f565b91505092915050565b60008083601f8401126137f257600080fd5b8235905067ffffffffffffffff81111561380b57600080fd5b60208301915083600182028301111561382357600080fd5b9250929050565b60008135905061383981615544565b92915050565b60006020828403121561385157600080fd5b600061385f8482850161374d565b91505092915050565b60006020828403121561387a57600080fd5b600061388884828501613762565b91505092915050565b600080604083850312156138a457600080fd5b60006138b28582860161374d565b92505060206138c38582860161374d565b9150509250929050565b6000806000606084860312156138e257600080fd5b60006138f08682870161374d565b93505060206139018682870161374d565b92505060406139128682870161382a565b9150509250925092565b6000806000806080858703121561393257600080fd5b60006139408782880161374d565b94505060206139518782880161374d565b93505060406139628782880161382a565b925050606085013567ffffffffffffffff81111561397f57600080fd5b61398b878288016137b6565b91505092959194509250565b600080604083850312156139aa57600080fd5b60006139b88582860161374d565b92505060206139c985828601613777565b9150509250929050565b600080604083850312156139e657600080fd5b60006139f48582860161374d565b9250506020613a058582860161382a565b9150509250929050565b600060208284031215613a2157600080fd5b6000613a2f84828501613777565b91505092915050565b600060208284031215613a4a57600080fd5b6000613a588482850161378c565b91505092915050565b600060208284031215613a7357600080fd5b6000613a81848285016137a1565b91505092915050565b60008060208385031215613a9d57600080fd5b600083013567ffffffffffffffff811115613ab757600080fd5b613ac3858286016137e0565b92509250509250929050565b600060208284031215613ae157600080fd5b6000613aef8482850161382a565b91505092915050565b6000613b048383614154565b60208301905092915050565b613b1981614928565b82525050565b6000613b2a8261479c565b613b3481856147ca565b9350613b3f83614777565b8060005b83811015613b70578151613b578882613af8565b9750613b62836147bd565b925050600181019050613b43565b5085935050505092915050565b613b868161494c565b82525050565b6000613b97826147a7565b613ba181856147db565b9350613bb18185602086016149bd565b613bba81614b89565b840191505092915050565b6000613bd0826147b2565b613bda81856147f7565b9350613bea8185602086016149bd565b613bf381614b89565b840191505092915050565b6000613c09826147b2565b613c138185614808565b9350613c238185602086016149bd565b80840191505092915050565b60008154613c3c816149f0565b613c468186614808565b94506001821660008114613c615760018114613c7257613ca5565b60ff19831686528186019350613ca5565b613c7b85614787565b60005b83811015613c9d57815481890152600182019150602081019050613c7e565b838801955050505b50505092915050565b6000613cbb6031836147f7565b9150613cc682614b9a565b604082019050919050565b6000613cde6014836147f7565b9150613ce982614be9565b602082019050919050565b6000613d01602b836147f7565b9150613d0c82614c12565b604082019050919050565b6000613d246032836147f7565b9150613d2f82614c61565b604082019050919050565b6000613d476026836147f7565b9150613d5282614cb0565b604082019050919050565b6000613d6a601c836147f7565b9150613d7582614cff565b602082019050919050565b6000613d8d6024836147f7565b9150613d9882614d28565b604082019050919050565b6000613db06019836147f7565b9150613dbb82614d77565b602082019050919050565b6000613dd3602c836147f7565b9150613dde82614da0565b604082019050919050565b6000613df6602b836147f7565b9150613e0182614def565b604082019050919050565b6000613e196010836147f7565b9150613e2482614e3e565b602082019050919050565b6000613e3c6045836147f7565b9150613e4782614e67565b606082019050919050565b6000613e5f6038836147f7565b9150613e6a82614edc565b604082019050919050565b6000613e82602a836147f7565b9150613e8d82614f2b565b604082019050919050565b6000613ea56029836147f7565b9150613eb082614f7a565b604082019050919050565b6000613ec86031836147f7565b9150613ed382614fc9565b604082019050919050565b6000613eeb6020836147f7565b9150613ef682615018565b602082019050919050565b6000613f0e602c836147f7565b9150613f1982615041565b604082019050919050565b6000613f31600583614808565b9150613f3c82615090565b600582019050919050565b6000613f546027836147f7565b9150613f5f826150b9565b604082019050919050565b6000613f776020836147f7565b9150613f8282615108565b602082019050919050565b6000613f9a6036836147f7565b9150613fa582615131565b604082019050919050565b6000613fbd6029836147f7565b9150613fc882615180565b604082019050919050565b6000613fe0602f836147f7565b9150613feb826151cf565b604082019050919050565b60006140036029836147f7565b915061400e8261521e565b604082019050919050565b60006140266021836147f7565b91506140318261526d565b604082019050919050565b60006140496000836147ec565b9150614054826152bc565b600082019050919050565b600061406c602f836147f7565b9150614077826152bf565b604082019050919050565b600061408f6031836147f7565b915061409a8261530e565b604082019050919050565b60006140b26034836147f7565b91506140bd8261535d565b604082019050919050565b60006140d5602c836147f7565b91506140e0826153ac565b604082019050919050565b60006140f86033836147f7565b9150614103826153fb565b604082019050919050565b600061411b6025836147f7565b91506141268261544a565b604082019050919050565b600061413e6021836147f7565b915061414982615499565b604082019050919050565b61415d816149a4565b82525050565b61416c816149a4565b82525050565b600061417e8285613c2f565b915061418a8284613bfe565b915061419582613f24565b91508190509392505050565b60006141ac8261403c565b9150819050919050565b60006020820190506141cb6000830184613b10565b92915050565b60006080820190506141e66000830187613b10565b6141f36020830186613b10565b6142006040830185614163565b81810360608301526142128184613b8c565b905095945050505050565b600060208201905081810360008301526142378184613b1f565b905092915050565b60006020820190506142546000830184613b7d565b92915050565b600060208201905081810360008301526142748184613bc5565b905092915050565b6000602082019050818103600083015261429581613cae565b9050919050565b600060208201905081810360008301526142b581613cd1565b9050919050565b600060208201905081810360008301526142d581613cf4565b9050919050565b600060208201905081810360008301526142f581613d17565b9050919050565b6000602082019050818103600083015261431581613d3a565b9050919050565b6000602082019050818103600083015261433581613d5d565b9050919050565b6000602082019050818103600083015261435581613d80565b9050919050565b6000602082019050818103600083015261437581613da3565b9050919050565b6000602082019050818103600083015261439581613dc6565b9050919050565b600060208201905081810360008301526143b581613de9565b9050919050565b600060208201905081810360008301526143d581613e0c565b9050919050565b600060208201905081810360008301526143f581613e2f565b9050919050565b6000602082019050818103600083015261441581613e52565b9050919050565b6000602082019050818103600083015261443581613e75565b9050919050565b6000602082019050818103600083015261445581613e98565b9050919050565b6000602082019050818103600083015261447581613ebb565b9050919050565b6000602082019050818103600083015261449581613ede565b9050919050565b600060208201905081810360008301526144b581613f01565b9050919050565b600060208201905081810360008301526144d581613f47565b9050919050565b600060208201905081810360008301526144f581613f6a565b9050919050565b6000602082019050818103600083015261451581613f8d565b9050919050565b6000602082019050818103600083015261453581613fb0565b9050919050565b6000602082019050818103600083015261455581613fd3565b9050919050565b6000602082019050818103600083015261457581613ff6565b9050919050565b6000602082019050818103600083015261459581614019565b9050919050565b600060208201905081810360008301526145b58161405f565b9050919050565b600060208201905081810360008301526145d581614082565b9050919050565b600060208201905081810360008301526145f5816140a5565b9050919050565b60006020820190508181036000830152614615816140c8565b9050919050565b60006020820190508181036000830152614635816140eb565b9050919050565b600060208201905081810360008301526146558161410e565b9050919050565b6000602082019050818103600083015261467581614131565b9050919050565b60006020820190506146916000830184614163565b92915050565b60006040820190506146ac6000830185614163565b6146b96020830184613b10565b9392505050565b600060c0820190506146d56000830189614163565b6146e26020830188613b10565b6146ef6040830187614163565b6146fc6060830186614163565b6147096080830185614163565b61471660a0830184614163565b979650505050505050565b600061472b61473c565b90506147378282614a22565b919050565b6000604051905090565b600067ffffffffffffffff82111561476157614760614b5a565b5b61476a82614b89565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061481e826149a4565b9150614829836149a4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561485e5761485d614acd565b5b828201905092915050565b6000614874826149a4565b915061487f836149a4565b92508261488f5761488e614afc565b5b828204905092915050565b60006148a5826149a4565b91506148b0836149a4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148e9576148e8614acd565b5b828202905092915050565b60006148ff826149a4565b915061490a836149a4565b92508282101561491d5761491c614acd565b5b828203905092915050565b600061493382614984565b9050919050565b600061494582614984565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156149db5780820151818401526020810190506149c0565b838111156149ea576000848401525b50505050565b60006002820490506001821680614a0857607f821691505b60208210811415614a1c57614a1b614b2b565b5b50919050565b614a2b82614b89565b810181811067ffffffffffffffff82111715614a4a57614a49614b5a565b5b80604052505050565b6000614a5e826149a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a9157614a90614acd565b5b600182019050919050565b6000614aa7826149a4565b9150614ab2836149a4565b925082614ac257614ac1614afc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f466c79696e67466f726d6174696f6e733a20557365722068617320616c72656160008201527f647920626f75676874206f6e65204e4654000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a2072656465656d2077696e646f772060008201527f6861732065787069726564000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f466c79696e67466f726d6174696f6e733a20696e73756666696369656e74206660008201527f756e64732073656e742c20706c6561736520636865636b2063757272656e742060208201527f7072696365000000000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a2072656465656d206973206375727260008201527f656e746c79206e6f7420656e61626c6564000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b7f466c79696e67466f726d6174696f6e733a204163636f756e74206973206e6f7460008201527f20616e20454f4100000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f466c79696e67466f726d6174696f6e733a20666f6f7462616c6c5465616d576160008201527f6c6c6574206661696c656420746f207265636569766500000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a2061756374696f6e20686173206e6f60008201527f7420737461727465640000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f466c79696e67466f726d6174696f6e733a206475636b7357616c6c657420666160008201527f696c656420746f20726563656976650000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a206469766973696f6e537457616c6c60008201527f6574206661696c656420746f2072656365697665000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a20746f6b656e2068617320616c726560008201527f616479206265656e65642072656465656d656400000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a2063616c6c6572206973206e6f742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f466c79696e67466f726d6174696f6e733a20696e76616c696420746f6b656e4960008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6154f181614928565b81146154fc57600080fd5b50565b6155088161493a565b811461551357600080fd5b50565b61551f8161494c565b811461552a57600080fd5b50565b61553681614958565b811461554157600080fd5b50565b61554d816149a4565b811461555857600080fd5b5056fea26469706673582212209ff0023dad896aa69d2586a60bc95f6e968427ce384110b5b037c26e2ca611a364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 912,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 914,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 918,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 922,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 926,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 932,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1866,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1870,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1873,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1877,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 697,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 812,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "_paused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 91,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "hasPurchased",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 93,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "saleStartsAt",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 95,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "redeemEnabled",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 97,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "redeemExpired",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 99,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "sneakerBaseURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 101,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "standardBaseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 110,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "sneakerRedeemedBy",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 112,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "footballTeamWallet",
        "offset": 0,
        "slot": "17",
        "type": "t_address_payable"
      },
      {
        "astId": 114,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "ducksWallet",
        "offset": 0,
        "slot": "18",
        "type": "t_address_payable"
      },
      {
        "astId": 116,
        "contract": "@contracts/FlyingFormations.sol:FlyingFormations",
        "label": "divisionStWallet",
        "offset": 0,
        "slot": "19",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}